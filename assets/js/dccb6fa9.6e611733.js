"use strict";(self.webpackChunkgrc=self.webpackChunkgrc||[]).push([[9231],{3093:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>m});var n=r(5893),o=r(1151);const a={title:"Patents"},s="Patents",i={type:"mdx",permalink:"/research/patents",source:"@site/src/pages/research/patents.mdx",title:"Patents",description:"Label-based Data Representation I/O Process and System",frontMatter:{title:"Patents"},unlisted:!1},c={},m=[{value:"Label-based Data Representation I/O Process and System",id:"label-based-data-representation-io-process-and-system",level:2},{value:"Methods and Devices for Layered Performance Matching in Hierarchical Memory",id:"methods-and-devices-for-layered-performance-matching-in-hierarchical-memory",level:2},{value:"Timing-Aware Data Prefetching for Microprocessors",id:"timing-aware-data-prefetching-for-microprocessors",level:2},{value:"Systems, Methods, and Protocols for Process Migration and Group Membership Management",id:"systems-methods-and-protocols-for-process-migration-and-group-membership-management",level:2},{value:"Memory Server",id:"memory-server",level:2},{value:"Communication and Process Migration Protocols for Distributed Heterogeneous Computing",id:"communication-and-process-migration-protocols-for-distributed-heterogeneous-computing",level:2}];function d(e){const t={em:"em",h1:"h1",h2:"h2",p:"p",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"patents",children:"Patents"}),"\n",(0,n.jsx)(t.h2,{id:"label-based-data-representation-io-process-and-system",children:"Label-based Data Representation I/O Process and System"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.em,{children:"Patent No. 11,630,834"})}),"\n",(0,n.jsx)(t.p,{children:"Abstract: A system and method for executing input/output (I/O) tasks for clients in a distributed\ncomputing system. One or more I/O requests made by a client are received. The operation instructions\nfor the request data in the I/O requests are separated from the request data. A data representation\ncalled data label (or label) is created for executing operation instructions of the I/O requests.\nA data label corresponds to each of the I/O request and includes a unique identifier, information\nto the source and/or destination for the request data, and an operation instruction separated from\nthe request data. The data label is pushed into a distributed label queue and is dispatched to an\nindividual worker node according to a scheduling policy. The worker node executes the I/O tasks by\nexecuting the dispatched data label. The system and method can execute I/O tasks independently and\ndecoupled from the client applications."}),"\n",(0,n.jsx)(t.h2,{id:"methods-and-devices-for-layered-performance-matching-in-hierarchical-memory",children:"Methods and Devices for Layered Performance Matching in Hierarchical Memory"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.em,{children:"Patent No. 9,846,646"})}),"\n",(0,n.jsx)(t.p,{children:"Abstract: A method of optimizing memory access in a hierarchical memory system. The method includes\ndetermining a request rate from an i'th layer of the hierarchical memory system for each of n layers\nin the hierarchical memory system. The method also includes determining a supply rate from an (i+1)'th\nlayer of the hierarchical memory system for each of the n layers in the hierarchical memory system.\nThe supply rate from the (i+1)'th layer of the hierarchical memory system corresponds to the request\nrate from the i'th layer of the hierarchical memory system. The method further includes adjusting a\nset of computer architecture parameters of the hierarchical memory system or a schedule associated\nwith an instruction set to utilize heterogeneous computing resources within the hierarchical memory\nsystem to match a performance of each adjacent layer of the hierarchical memory system."}),"\n",(0,n.jsx)(t.h2,{id:"timing-aware-data-prefetching-for-microprocessors",children:"Timing-Aware Data Prefetching for Microprocessors"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.em,{children:"Patent No. 8,856,452"})}),"\n",(0,n.jsx)(t.p,{children:"Abstract: A method and apparatus for prefetching data from memory for a multicore data processor. A prefetcher\nissues a plurality of requests to prefetch data from a memory device to a memory cache. Consecutive cache\nmisses are recorded in response to at least two of the plurality of requests. A time between the cache misses\nis determined and a timing of a further request to prefetch data from the memory device to the memory cache\nis altered as a function of the determined time between the two cache misses."}),"\n",(0,n.jsx)(t.h2,{id:"systems-methods-and-protocols-for-process-migration-and-group-membership-management",children:"Systems, Methods, and Protocols for Process Migration and Group Membership Management"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.em,{children:"Patent No. 8,335,813"})}),"\n",(0,n.jsx)(t.p,{children:"Abstract: A system, method, and set of protocols for dynamic group communication are provided for enabling dynamic\nprocess migration and dynamic group membership management. A process in a group receives and distributes a migration\nsignal. Group communication continues while the processes in the group asynchronously reach a global superstep and\nthen a synchronization point. The processes then spawn a new process on a new device and update group membership\ninformation. The new process operates in continuous execution with the new group."}),"\n",(0,n.jsx)(t.h2,{id:"memory-server",children:"Memory Server"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.em,{children:"Patent No. 7,865,570"})}),"\n",(0,n.jsx)(t.p,{children:"Abstract: A memory server provides data access as a service to clients and has a memory service architecture and\ncomponents for removing data management burdens from the client processor and providing increased speed and utility\nfor the client through aggressive prediction of client memory requirements and fast provision of data."}),"\n",(0,n.jsx)(t.h2,{id:"communication-and-process-migration-protocols-for-distributed-heterogeneous-computing",children:"Communication and Process Migration Protocols for Distributed Heterogeneous Computing"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.em,{children:"Patent No. 7,065,549"})}),"\n",(0,n.jsx)(t.p,{children:"Abstract: Communication and Process Migration Protocols instituted in an independent layer of a virtual machine environment\nallow for heterogeneous or homogeneous process migration. The protocols manage message traffic for processes communicating\nin the virtual machine environment. The protocols manage message traffic for migrating processes so that no message traffic\nis lost during migration, and proper message order is maintained for the migrating process. In addition to correctness of\nmigration operations, low overhead and high efficiency is achieved for supporting scalable, point-to-point communications."})]})}function h(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,t,r)=>{r.d(t,{Z:()=>i,a:()=>s});var n=r(7294);const o={},a=n.createContext(o);function s(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);