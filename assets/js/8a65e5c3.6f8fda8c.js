"use strict";(self.webpackChunkgrc=self.webpackChunkgrc||[]).push([[2698],{6178:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var i=t(5893),r=t(1151);const o={},s="Programming",a={id:"hermes/programming",title:"Programming",description:"In this section, we will discuss the general steps of building a program",source:"@site/docs/03-hermes/05-programming.md",sourceDirName:"03-hermes",slug:"/hermes/programming",permalink:"/docs/hermes/programming",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/docs/hermes/configuration"},next:{title:"Buffer Organizer",permalink:"/docs/hermes/components/buffer-organizer"}},l={},c=[{value:"Basic API Example",id:"basic-api-example",level:2},{value:"Basic Deployment",id:"basic-deployment",level:2},{value:"Create a server configuration",id:"create-a-server-configuration",level:3},{value:"Launch the Hermes Daemon",id:"launch-the-hermes-daemon",level:3},{value:"Launch your application",id:"launch-your-application",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"programming",children:"Programming"}),"\n",(0,i.jsx)(n.p,{children:"In this section, we will discuss the general steps of building a program\non top of the Hermes native API. We will focus on the core data structures\nprovided by Hermes -- Buckets and Blobs."}),"\n",(0,i.jsx)(n.h2,{id:"basic-api-example",children:"Basic API Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <hermes.h>\n#include <bucket.h>\n\nint main() {\n  HERMES->Create(hermes::HermesType::kClient);\n  Bucket bkt = hermes->GetBucket("hello");\n  size_t blob_size = KILOBYTES(4);\n  Context ctx;\n\n  for (size_t i = 0; i < num_blobs; ++i) {\n    hermes::Blob blob(blob_size);\n    std::string name = std::to_string(i);\n    char nonce = i % 256;\n    memset(blob.data(), nonce, blob_size);\n    bkt.Put(name, blob, blob_id, ctx);\n  }\n\n  for (size_t i = 0; i < num_blobs; ++i) {\n    std::string name = std::to_string(i);\n    char nonce = i % 256;\n    hermes::Blob blob;\n    bkt.GetBlobId(name, blob_id);\n    bkt.Get(blob_id, blob, ctx);\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"HERMES is a singleton macro provided in hermes.h."}),"\n",(0,i.jsx)(n.li,{children:"GetBucket will either create a bucket or get the bucket if it exists.\nThis operation is concurrency-safe. I.e., it is guaranteed only one\nthread or process calling this function will create the bucket if it\nDNE."}),"\n",(0,i.jsx)(n.li,{children:"Context is optional. It contains the ability to override\ndefaults defined in the server and client configuration files. For\nexample, you can set a custom DPE to use for a blob Put."}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"hermes::Blob analagous to and std::vector<char>"}),". It's not quite the\nsame thing, but we won't go into detail here."]}),"\n",(0,i.jsx)(n.li,{children:"bkt.Put will put a blob into the bucket. Put destroys all content\nif the blob previously existed. At this time, blobs are considered\nimmutable."}),"\n",(0,i.jsx)(n.li,{children:"bkt.Get will get the contents of an entire blob."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"basic-deployment",children:"Basic Deployment"}),"\n",(0,i.jsx)(n.p,{children:"Here we will describe the basic flow of deploying a Hermes program."}),"\n",(0,i.jsx)(n.h3,{id:"create-a-server-configuration",children:"Create a server configuration"}),"\n",(0,i.jsxs)(n.p,{children:["Technically, this is optional. Hermes has a\n",(0,i.jsx)(n.a,{href:"https://github.com/HDFGroup/hermes/blob/master/config/hermes_server_default.yaml",children:"default server\nconfiguration"}),".\nThe main important thing here is defining the storage devices on your machines.\nThe example file has more details."]}),"\n",(0,i.jsx)(n.p,{children:"The Hermes server configuration is also described in Section 3."}),"\n",(0,i.jsx)(n.h3,{id:"launch-the-hermes-daemon",children:"Launch the Hermes Daemon"}),"\n",(0,i.jsx)(n.p,{children:"To launch the daemon on a single node, do the following:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"HERMES_CONF=/path/to/your/hermes_server.yaml \\\nhermes_daemon\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you need the daemon on multiple nodes, we support MPI"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mpirun -n 4 -ppn 1 --hostfile=hostfile.txt \\\n-genv HERMES_CONF /path/to/your/hermes_server.yaml \\\nhermes_daemon\n"})}),"\n",(0,i.jsx)(n.p,{children:"Make sure to only spawn one daemon per node."}),"\n",(0,i.jsx)(n.h3,{id:"launch-your-application",children:"Launch your application"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"HERMES_CONF=/path/to/your/hermes_server.yaml \\\nHERMES_CLEINT_CONF=/path/to/your/hermes_client.yaml \\\n./myprogram\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>s});var i=t(7294);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);