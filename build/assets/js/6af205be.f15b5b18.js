"use strict";(self.webpackChunkgrc=self.webpackChunkgrc||[]).push([[7250],{7252:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var i=r(5893),l=r(1151);const o={},s="Hello World",c={id:"hpc-tutorials/cpp-introduction/hello-world",title:"Hello World",description:"Choosing a Compiler",source:"@site/docs/02-hpc-tutorials/04-cpp-introduction/01-hello-world.md",sourceDirName:"02-hpc-tutorials/04-cpp-introduction",slug:"/hpc-tutorials/cpp-introduction/hello-world",permalink:"/docs/hpc-tutorials/cpp-introduction/hello-world",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++ Introduction",permalink:"/docs/category/c-introduction"},next:{title:"Hermes",permalink:"/docs/category/hermes"}},t={},d=[{value:"Choosing a Compiler",id:"choosing-a-compiler",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Setup",id:"setup",level:2},{value:"C++ Source File",id:"c-source-file",level:2},{value:"C++ Header Files",id:"c-header-files",level:2},{value:"Program start",id:"program-start",level:2},{value:"Console output",id:"console-output",level:2},{value:"Program return",id:"program-return",level:2},{value:"Building",id:"building",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,l.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"hello-world",children:"Hello World"}),"\n",(0,i.jsx)(n.h2,{id:"choosing-a-compiler",children:"Choosing a Compiler"}),"\n",(0,i.jsx)(n.p,{children:"There are many C++ compilers."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GNU compiler collection (GCC)"}),": The standard C/C++ compiler provided on most Linux systems. Linux-only."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Clang"}),": Clang provides various extensions that can be used to build custom compiler add-ons. Cross-platform.\r\nStandard on Mac."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Microsoft Visual C++ (MSVC)"}),": The standard C/C++ compiler for Windows."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Intel Compiler"}),": Sometimes used. Optimizations for intel products."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MinGW"}),": Like gcc, except works on Windows."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Generally, we prioritize compiling for Linux systems. This means we typically focus on gcc and occasionally clang. Clang is a more modern compiler with many advanced features and better warnings and error messages. However, we generally focus on gcc."}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:["In this example, we will demonstrate how print text to a terminal. One of the main use of printing is for debugging.\r\nTools such as ",(0,i.jsx)(n.a,{href:"https://github.com/google/glog",children:"Google Logger"}),", are used to make print statements to help determine\r\nwhere a program crashes, without having to use an expensive debugger all the time."]}),"\n",(0,i.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd ${SCS_TUTORIAL}/cpp_hello_world\n"})}),"\n",(0,i.jsx)(n.h2,{id:"c-source-file",children:"C++ Source File"}),"\n",(0,i.jsxs)(n.p,{children:["Below is the code in ",(0,i.jsx)(n.code,{children:"hello_world.cc"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <stdio.h>\r\n#include <iostream>\r\n\r\nint main() {\r\n  printf("Hello world 0\\n");\r\n  std::cout << "hello world 1" << std::endl;\r\n  return 0;\r\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"We will describe this step-by-step."}),"\n",(0,i.jsx)(n.h2,{id:"c-header-files",children:"C++ Header Files"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <stdio.h>\r\n#include <iostream>\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"#include"}),' is used to instruct the C++ compiler where to find header files. In our case, the header files being included are\r\n"',(0,i.jsx)(n.code,{children:"stdio.h"}),'" and "',(0,i.jsx)(n.code,{children:"iostream"}),"\". Header files typically contain the definitions of functions. They have the same syntax as a source\r\nfile, but they don't typically have as much code logic."]}),"\n",(0,i.jsxs)(n.p,{children:['To find header files, compilers will search a number of places. For example, "',(0,i.jsx)(n.code,{children:"/usr/include"}),'" will typically contain "',(0,i.jsx)(n.code,{children:"stdio.h"}),'"\r\nand "',(0,i.jsx)(n.code,{children:"/usr/include/c++"}),'" may contain iostream. These paths are subject to change depending on the gcc version and OS.']}),"\n",(0,i.jsxs)(n.p,{children:['In our case, "',(0,i.jsx)(n.code,{children:"stdio.h"}),'" is where printf is defined, and "',(0,i.jsx)(n.code,{children:"iostream"}),'" is where ',(0,i.jsx)(n.code,{children:"std::cout"})," is defined."]}),"\n",(0,i.jsx)(n.h2,{id:"program-start",children:"Program start"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"int main() {\r\n  // code here...\r\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The main function is required in order to execute a C++ program. When you launch a program, the main function is where\r\nthe code execution begins."}),"\n",(0,i.jsx)(n.h2,{id:"console-output",children:"Console output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'printf("Hello world 0\\n");\r\nstd::cout << "Hello world 1" << std::endl;\n'})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Text is always in double quotes ",(0,i.jsx)(n.code,{children:'""'})]}),"\n",(0,i.jsxs)(n.li,{children:['"',(0,i.jsx)(n.code,{children:"\\n"}),'" in "Hello world 0" means "new line". Analogous to hitting the ',(0,i.jsx)("kbd",{children:"Enter"})," key on your keyboard in a text editor."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"std::cout"})," uses left shift operator (",(0,i.jsx)(n.code,{children:"<<"}),") to print to console"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"std::endl"})," is equivalent to '",(0,i.jsx)(n.code,{children:"\\n"}),"'"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"printf"})," takes the text as a function parameter"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Both ",(0,i.jsx)(n.code,{children:"printf"})," and ",(0,i.jsx)(n.code,{children:"cout"})," are valid ways of printing. Typically ",(0,i.jsx)(n.code,{children:"cout"})," is preferred in C++ programs, but you'll likely see\r\nboth in example programs."]}),"\n",(0,i.jsx)(n.h2,{id:"program-return",children:"Program return"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"int main() {\r\n  // code here...\r\n  return 0;\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:['Main returns an integer "',(0,i.jsx)(n.code,{children:"int"}),'". This indicates the success or failure of a program. Generally, a return value of "',(0,i.jsx)(n.code,{children:"0"}),'" indicates\r\nthe program succeeded. Any other value indicates a failure and the reason for failure.']}),"\n",(0,i.jsx)(n.h2,{id:"building",children:"Building"}),"\n",(0,i.jsx)(n.p,{children:"We will build this code manually using gcc. It is generally a bad idea to compile things manually, but the knowledge of how\r\nthe compiler is called will be helpful."}),"\n",(0,i.jsxs)(n.p,{children:['Here we will use gcc to compile the program "',(0,i.jsx)(n.code,{children:"hello_world.cc"}),'".']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"g++ hello_world.cc -o hello_world\n"})}),"\n",(0,i.jsx)(n.p,{children:'This will produce an executable file called "hello_world". To run the code:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"./hello_world\n"})}),"\n",(0,i.jsx)(n.p,{children:"The output will be:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"hello world 0\r\nhello world 1\n"})}),"\n",(0,i.jsx)(n.p,{children:"To view the return code of the program in Linux:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"$?\n"})}),"\n",(0,i.jsx)(n.p,{children:"The output will be:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"0\n"})}),"\n",(0,i.jsxs)(n.p,{children:["which is what we returned using the ",(0,i.jsx)(n.code,{children:"return"})," statement."]})]})}function h(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>c,a:()=>s});var i=r(7294);const l={},o=i.createContext(l);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);