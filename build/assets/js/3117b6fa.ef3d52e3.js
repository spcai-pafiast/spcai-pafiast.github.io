"use strict";(self.webpackChunkgrc=self.webpackChunkgrc||[]).push([[9342],{5722:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var t=i(5893),r=i(1151),s=i(3161);const a={title:"Viper: A High-Performance I/O Framework for Transferring Deep Neural Network Models"},o="Viper: A High-Performance I/O Framework for Transferring Deep Neural Network Models",c={type:"mdx",permalink:"/research/projects/viper",source:"@site/src/pages/research/projects/viper.mdx",title:"Viper: A High-Performance I/O Framework for Transferring Deep Neural Network Models",description:"Within a DL workflow, the scientific AI application and the inference serving system typically communicate",frontMatter:{title:"Viper: A High-Performance I/O Framework for Transferring Deep Neural Network Models"},unlisted:!1},l={},d=[{value:"Background",id:"background",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Approach",id:"approach",level:2},{value:"Evaluation Results",id:"evaluation-results",level:2},{value:"Members",id:"members",level:2}];function h(e){const n={h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("p",{children:(0,t.jsx)("img",{src:i(8500).Z,width:"200"})}),"\n",(0,t.jsx)(n.h1,{id:"viper-a-high-performance-io-framework-for-transferring-deep-neural-network-models",children:"Viper: A High-Performance I/O Framework for Transferring Deep Neural Network Models"}),"\n",(0,t.jsx)(s.Z,{projectId:"viper"}),"\n",(0,t.jsx)(n.p,{children:"Within a DL workflow, the scientific AI application and the inference serving system typically communicate\r\nthe DNN models through a model repository (e.g., PFS). However, this method may result in high model update\r\nlatency due to I/O bottlenecks of PFS and high model discovery latency due to the fixed-interval pull-based\r\nmodel detection mechanism. Moreover, both continuous learning and the scenario that consumer has a limited\r\ntime window for inferencing increases the model update frequency between producers and consumers. Model update\r\nfrequency affects both training and inference performance. Viper is a high-performance I/O framework aiming\r\nto accelerate the model exchange, and to find an optimal model update schedule to achieve high inference\r\nperformance while keeping low training cost."}),"\n",(0,t.jsx)(n.h2,{id:"background",children:"Background"}),"\n",(0,t.jsx)(n.p,{children:"In the traditional deep learning (DL) workflow:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Producer (Scientific AI Application) typically trains a DNN model offline with a fixed set of input data and then persists the trained model to a model repository for future use"}),"\n",(0,t.jsx)(n.li,{children:"Consumer (Inference Serving System) loads the pre-trained DNN model from the model repository and offers online inference queries for end-user applications"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"However, this offline training is not an ideal choice in two scenarios:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["**Scenario 1: ** Modern scientific DL workflows often operate in dynamic environments where new data is constantly changing and accumulating over time.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"To adapt to data changes, continuous learning is utilized to continuously (re)-train a DNN model by using some online techniques."}),"\n",(0,t.jsx)(n.li,{children:"Continuous learning implies the continuous deployment of the DNN model to keep the model up-to-date"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["**Scenario 2: ** The consumer may have a limited time window for inferences, it may need to start inferencing after the warmup phase in model training on the producer side","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Producer continues training the model while the consumer conducts inferences"}),"\n",(0,t.jsx)(n.li,{children:"This requires the intermediate DNN models to be consistently delivered from the producer to the consumer during training to achieve high inference performance"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)("center",{children:(0,t.jsx)("p",{children:(0,t.jsx)("img",{src:i(5522).Z,width:"600"})})}),"\n",(0,t.jsxs)(n.p,{children:["Both scenarios ",(0,t.jsx)(n.strong,{children:"increase the model update frequency"})," between producers and consumers."]}),"\n",(0,t.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,t.jsx)("center",{children:(0,t.jsx)("p",{children:(0,t.jsx)("img",{src:i(3201).Z,width:"600"})})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Model update frequency ",(0,t.jsx)(n.strong,{children:"affects both training and inference performance"}),", since a model update operation involves both model checkpointing and model data delivery.E.g.,","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Frequent model updates can enhance inference performance but may slow down training"}),"\n",(0,t.jsx)(n.li,{children:"Infrequent model updates may pose less overhead on training but may degrade the overall inference model accuracy"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Currently, Scientific AI Applications and Inference Serving Systems communicate through a model repository (e.g., PFS), as depicted in Figure (a). This communication method may result in:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"High model update latency"})," due to the I/O bottlenecks caused by concurrent, uncoordinated, small I/O accesses to PFS"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"High model discovery High model discovery latency on consumers"})," due to the static fixed-interval pull-based (e.g., polling) detection mechanism"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Thus, there is a need to 1) ",(0,t.jsx)(n.strong,{children:"balance the trade-off"})," between training and inference performance; 2) ",(0,t.jsx)(n.strong,{children:"accelerate model data discovery and delivery"})," between producers and consumers (Figure b)."]}),"\n",(0,t.jsx)(n.h2,{id:"approach",children:"Approach"}),"\n",(0,t.jsx)("center",{children:(0,t.jsx)("p",{children:(0,t.jsx)("img",{src:i(7180).Z,width:"600"})})}),"\n",(0,t.jsx)(n.p,{children:"Viper is a high-performance I/O framework to accelerate DNN models exchange between\r\nproducers and consumers. It aims to:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Balance the trade-off between training runtime and inference performance"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Viper builds an ",(0,t.jsx)(n.strong,{children:"intelligent inference performance predictor"})," to achieve this object","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Can ",(0,t.jsx)(n.strong,{children:"decide an optimal model checkpoint schedule"})," between producers and consumers"]}),"\n",(0,t.jsx)(n.li,{children:"Supporting two different algorithms for finding the optimal checkpoint schedule"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Accelerate model data transfer"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Viper creates a ",(0,t.jsx)(n.strong,{children:"novel cache-aware data transfer engine"})," to speedup model update between producers and consumers","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Creating a direct data exchange channel for model delivery and utilizes. E.g., the direct GPU-to-GPU or RAM-to-RAM data transfer strategy"}),"\n",(0,t.jsx)(n.li,{children:"Utilizing a lightweight ublish-subscribe notification mechanism to promptly inform the consumer of the model changes."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)("center",{children:(0,t.jsx)("p",{children:(0,t.jsx)("img",{src:i(7723).Z,width:"400"})})}),"\n",(0,t.jsx)(n.h2,{id:"evaluation-results",children:"Evaluation Results"}),"\n",(0,t.jsxs)("center",{children:[(0,t.jsx)("h3",{children:"End-to-end Model Update Latency"}),(0,t.jsxs)("div",{style:{display:"flex",justifyContent:"start"},children:[(0,t.jsx)("div",{children:(0,t.jsx)("img",{src:i(8565).Z,width:"300"})}),(0,t.jsx)("div",{style:{display:"flex",alignItems:"center",justifyContent:"center"},children:(0,t.jsxs)("ul",{style:{textAlign:"left"},children:[(0,t.jsx)("li",{children:"The Y-axis shows the end-to-end CANDLE-NT3 model update latency in seconds"}),(0,t.jsx)("li",{children:"Viper improves model update latency by"}),(0,t.jsxs)("ul",{style:{textAlign:"left"},children:[(0,t.jsxs)("li",{children:[(0,t.jsx)("strong",{children:"~10x"})," via GPU-to-GPU model transfer strategy"]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("strong",{children:"~3.5x"})," via RAM-to-RAM model transfer strategy"]})]})]})})]}),(0,t.jsx)("h3",{children:"Benefits of Low-latency Model Update Strategy"}),(0,t.jsxs)("div",{style:{display:"flex",justifyContent:"space-between"},children:[(0,t.jsx)("div",{children:(0,t.jsx)("img",{src:i(7350).Z,width:"400"})}),(0,t.jsx)("div",{style:{display:"flex",alignItems:"center",justifyContent:"center"},children:(0,t.jsxs)("ul",{style:{textAlign:"left"},children:[(0,t.jsx)("li",{children:"Application: CANDLE-NT3 model of 4.6GB size"}),(0,t.jsx)("li",{children:"The left Y-axis shows cumulative inference loss over 50000 inference requests"}),(0,t.jsx)("li",{children:"The right Y-axis shows training overhead added by model checkpointing"}),(0,t.jsx)("li",{children:"GPU-to-GPU and RAM-to-RAM model transfer strategies exhibit"}),(0,t.jsxs)("ul",{style:{textAlign:"left"},children:[(0,t.jsx)("li",{children:"lower cumulative inference loss"}),(0,t.jsx)("li",{children:"less training overhead time"})]})]})})]})]}),"\n",(0,t.jsx)(n.h2,{id:"members",children:"Members"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Jie Ye, Illinois Institute of Technology"}),"\n",(0,t.jsx)(n.li,{children:"Jaime Cernuda, Illinois Institute of Technology"}),"\n",(0,t.jsx)(n.li,{children:"Bogdan Nicolae, Argonne National Laboratory"}),"\n",(0,t.jsx)(n.li,{children:"Anthony Kougkas, Illinois Institute of Technology"}),"\n",(0,t.jsx)(n.li,{children:"Xian-He Sun, Illinois Institute of Technology"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},3161:(e,n,i)=>{i.d(n,{Z:()=>a});i(7294);var t=i(512),r=i(866),s=i(5893);function a(e){let{addMargin:n=!0,projectId:i}=e;const{isOpenSource:a=!1,isOurs:o=!1}=(0,r.R)(i);return a||o?(0,s.jsxs)("div",{className:(0,t.Z)(n&&"margin-bottom--md"),style:{lineHeight:1},children:[o&&(0,s.jsx)("span",{className:"badge badge--primary margin-horiz--xs",children:"GRC-LED"}),a&&(0,s.jsx)("span",{className:"badge badge--secondary margin-horiz--xs",children:"OPEN SOURCE"})]}):null}},866:(e,n,i)=>{i.d(n,{R:()=>s,Z:()=>r});const t=[{id:"coeus",name:"Coeus",title:"Coeus: Accelerating Scientific Insights Using Enriched Metadata",shortDescription:"In collaboration with Sandia and Oak Ridge National Laboratories, coeus investigate the use of an active storage system to calculate derived quantities and support complex queries on scientific data (simulation and observational) as well as optimizing data placement across the storage hierarchy, with awareness of the resource limitations, to better support the scientific discovery process.",link:"/research/projects/coeus",isFeatured:!0,isOurs:!0,researchStatus:"r&d",status:"active",type:"funded"},{id:"chronolog",name:"ChronoLog",title:"ChronoLog: A High-Performance Storage Infrastructure for Activity and Log Workloads",shortDescription:"HPC applications generate more data than storage systems can handle, and it is becoming increasingly important to store activity (log) data generated by people and applications. ChronoLog is a hierarchical, distributed log store that leverages physical time to achieve log ordering and reduce contention while utilizing storage tiers to elastically scale the log capacity.",link:"/research/projects/chronolog",isFeatured:!0,isOpenSource:!0,isOurs:!0,researchStatus:"testing",status:"active",type:"funded"},{id:"iris",name:"IRIS",title:"IRIS: I/O Redirection Via Integrated Storage",shortDescription:"Various storage solutions exist and require specialized APIs and data models in order to use, which binds developers, applications, and entire computing facilities to using certain interfaces. Each storage system is designed and optimized for certain applications but does not perform well for others. IRIS is a unified storage access system that bridges the semantic gap between filesystems and object stores.",link:"/research/projects/iris",isFeatured:!1,isOpenSource:!0,isOurs:!0,researchStatus:"testing",status:"active",type:"funded"},{id:"hermes",name:"Hermes",title:"Hermes: Extending the HDF Library to Support Intelligent I/O Buffering for Deep Memory and Storage Hierarchy System",shortDescription:"To reduce the I/O bottleneck, complex storage hierarchies have been introduced. However, managing this complexity should not be left to application developers. Hermes is a middeware library that automatically manages buffering in heterogeneous storage environments.",link:"/research/projects/hermes",isFeatured:!0,isOpenSource:!0,isOurs:!0,researchStatus:"ready",status:"active",type:"funded"},{id:"labios",name:"Labios",title:"LABIOS: A Distributed Label-Based I/O System",shortDescription:"HPC and Big Data environments have diverged over the years, resulting in diverging and even conflicting I/O requirements. Labios aims to address the challenges vital to HPC + Big Data Convergence",link:"/research/projects/labios",isFeatured:!1,isOurs:!0,researchStatus:"r&d",status:"active",type:"funded"},{id:"dtio",name:"DTIO",title:"DTIO: A Data Task I/O Runtime",shortDescription:"In partnership with Argonne National Laboratory, DTIO investigates the use of a task framework for unifying complex I/O stacks and providing features such as resilience, fault-tolerance, and task replay.",link:"/research/projects/dtio",isFeatured:!1,isOurs:!0,researchStatus:"testing",status:"active",type:"funded"},{id:"viper",name:"Viper",title:"Viper: A High-Performance I/O Framework for Transferring Deep Neural Network Models",shortDescription:"Within a DL workflow, exchanging DNN models through PFS may result in  high model update latency and discovery latency. Moreover, model update frequency affects both training and inference performance. Viper is an I/O framework aiming to accelerate model discovery and delivery, and to find an optimal model checkpoint schedule to balance the trade-off.",link:"/research/projects/viper",isFeatured:!1,isOurs:!0,researchStatus:"r&d",status:"active",type:"funded"},{id:"dayu",name:"DaYu",title:"DaYu: Optimizing Workflow Performance by Elucidating Semantic Data Flow",shortDescription:"Nowadays, distributed scientific workflows encounter challenges in data movement through storage systems. DaYu, by capturing the mapping of data objects to I/O operations, can uncover new insights for optimizing workflow data movement.",link:"/research/projects/dayu",isFeatured:!1,isOpenSource:!0,isOurs:!0,researchStatus:"testing",status:"active",type:"funded"},{id:"wisio",name:"WisIO",title:"WisIO: Automated I/O Bottleneck Detection via Multi-Perspective Views for HPC Workloads",shortDescription:"Explore WisIO, an automated I/O bottleneck detection tool with multi-perspective views for I/O trace data analysis. Overcoming large-scale I/O challenges, WisIO utilizes distributed computing and an extensible rule engine for tailored solutions. Elevate your I/O analysis in HPC environments with WisIO.",link:"/research/projects/wisio",isFeatured:!1,isOpenSource:!1,isOurs:!0,researchStatus:"r&d",status:"active",type:"student"}],r=t;function s(e){return t.find((n=>n.id===e))}},7350:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/benefits_low_latency_strategy-f5f6fc2cb955c936c1e9b6fc8cbe4193.png"},7723:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/data_transfer-bd621a0c8a42b3401593200c131b1c32.png"},8565:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/end_to_end_latency-b64732777ddcba119a7224e8cc98fb17.png"},7180:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/high_level_design-33c6a561fda3dd9c72e992691933f5dd.png"},8500:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/logo-95bd4156d3a78ae2165cd6b0cd2d41b8.png"},5522:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/scenario2-3f2e0ace5443aaec287e4fd1dd06be5c.png"},3201:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/viper_motivation-59af44a57af0d841b49966ce02f4c5b6.png"},1151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>a});var t=i(7294);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);