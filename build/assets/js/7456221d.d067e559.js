"use strict";(self.webpackChunkgrc=self.webpackChunkgrc||[]).push([[4407],{3271:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>h});var s=r(5893),a=r(1151);const i={},t="Argument Parsing",l={id:"jarvis/jarvis-util/argument-parsing",title:"Argument Parsing",description:"We provide a custom argument parsing implementation. The main difference between",source:"@site/docs/05-jarvis/01-jarvis-util/04-argument-parsing.md",sourceDirName:"05-jarvis/01-jarvis-util",slug:"/jarvis/jarvis-util/argument-parsing",permalink:"/docs/jarvis/jarvis-util/argument-parsing",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Built-in Wrappers",permalink:"/docs/jarvis/jarvis-util/builtin-wrappers"},next:{title:"Hostfile",permalink:"/docs/jarvis/jarvis-util/hostfile"}},o={},h=[{value:"Defining Arguments",id:"defining-arguments",level:2},{value:"Required Positional Arguments",id:"required-positional-arguments",level:3},{value:"Optional Positional Arguments",id:"optional-positional-arguments",level:3},{value:"<code>keyword</code> Arguments",id:"keyword-arguments",level:3},{value:"Detecting Explicitly Set Parameters",id:"detecting-explicitly-set-parameters",level:3},{value:"Help",id:"help",level:3},{value:"Menus",id:"menus",level:2},{value:"VPIC Menu",id:"vpic-menu",level:3},{value:"BD-CATS Run Menu",id:"bd-cats-run-menu",level:3},{value:"BD-CATS Draw Menu",id:"bd-cats-draw-menu",level:3},{value:"Argument Types",id:"argument-types",level:2},{value:"Boolean Arguments",id:"boolean-arguments",level:3},{value:"<code>True</code>",id:"true",level:4},{value:"<code>False</code>",id:"false",level:4},{value:"List Arguments",id:"list-arguments",level:3},{value:"Nested List Arguments",id:"nested-list-arguments",level:3},{value:"Tracking Remaining Arguments",id:"tracking-remaining-arguments",level:2},{value:"List Remainder",id:"list-remainder",level:3},{value:"Key-Value Remainder",id:"key-value-remainder",level:3},{value:"Choice Arguments",id:"choice-arguments",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"argument-parsing",children:"Argument Parsing"}),"\n",(0,s.jsx)(n.p,{children:'We provide a custom argument parsing implementation. The main difference between\r\nthis argparser and others is that we support the concept of "menus".\r\nJarvis calls sub-modules, which each have their own specific interfaces.\r\nThere are sub-modules for modifying the resource graph, initializing jarvis,\r\ncreating pipelines, etc. These modules each have different parameter spaces.'}),"\n",(0,s.jsx)(n.h2,{id:"defining-arguments",children:"Defining Arguments"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ArgParse"})," class has an abstract method called define_options. Create\r\na class inheriting from that method and use define_options to make the menu."]}),"\n",(0,s.jsxs)(n.p,{children:["We have the example ",(0,s.jsx)(n.a,{href:"https://github.com/grc-iit/jarvis-util/blob/master/example/basic_argparse.py",children:"basic_argparse.py"})," below:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from jarvis_util.util.argparse import ArgParse\r\n\r\nclass MyArgParse(ArgParse):\r\n    def define_options(self):\r\n        self.add_menu()\r\n        self.add_args([\r\n            {\r\n                'name': 'hello',\r\n                'msg': 'A message to print',\r\n                'type': str,  # The type of this variable\r\n                'required': True,  # This argument is required\r\n                'pos': True,  # This is a positional argument\r\n            },\r\n            {\r\n                'name': 'hello_optional',\r\n                'msg': 'An optional message to print',\r\n                'type': str,  # The type of the variable to produce\r\n                'default': 'no optional message given',\r\n                'required': False,  # This argument is not required\r\n                'pos': True,  # This is a positional argument\r\n            },\r\n            {\r\n                'name': 'hello_kwarg',\r\n                'msg': 'An integer keyword argument to print',\r\n                'type': int,  # The type of the variable\r\n                'default': 0,\r\n            },\r\n        ])\r\n\r\n    # When add_menu has no parameters, process_args will call this function\r\n    def main_menu(self):\r\n        # Parsed parameters are placed in self.kwargs\r\n        print(self.kwargs['hello'])\r\n        print(self.kwargs['hello_optional'])\r\n        print(self.kwargs['hello_kwarg'])\r\n        print(self.real_kwargs)\r\n\r\n\r\nargs = MyArgParse()\r\nargs.process_args()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"required-positional-arguments",children:"Required Positional Arguments"}),"\n",(0,s.jsx)(n.p,{children:'The first argument we defined was "hello", which is a required parameter.'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"{\r\n    'name': 'hello',\r\n    'msg': 'A message to print',\r\n    'type': str,  # The type of this variable\r\n    'required': True,  # This argument is required\r\n    'pos': True,  # This is a positional argument\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"This is the only required parameter in this case. We can run the program\r\nabove with only this one parameter."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python3 example/basic_argparse.py 'my required msg'\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"my required msg\r\nno optional message given\r\n0\r\n{'hello_kwarg': 0, 'hello': 'my required msg', 'hello_optional': 'no optional message given'}\r\n{'hello': 'my required msg'}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"optional-positional-arguments",children:"Optional Positional Arguments"}),"\n",(0,s.jsx)(n.p,{children:'The second argument we defined was "hello_optional", which is optional.'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"{\r\n    'name': 'hello_optional',\r\n    'msg': 'An optional message to print',\r\n    'type': str,  # The type of the variable to produce\r\n    'default': 'no optional message given',\r\n    'required': False,  # This argument is not required\r\n    'pos': True,  # This is a positional argument\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"To input the optional positional parameter, run the command below:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python3 example/basic_argparse.py 'my required msg' 'my optional message'\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"my required msg\r\nmy optional message\r\n0\r\n{'hello_kwarg': 0, 'hello': 'my required msg', 'hello_optional': 'my optional message'}\r\n{'hello': 'my required msg', 'hello_optional': 'my optional message'}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"keyword-arguments",children:[(0,s.jsx)(n.code,{children:"keyword"})," Arguments"]}),"\n",(0,s.jsx)(n.p,{children:'The third argument we defined was "hello_kwarg". keyword arguments are\r\nalways optional. The default value, if not specified, will be None.'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"{\r\n    'name': 'hello_kwarg',\r\n    'msg': 'An integer keyword argument to print',\r\n    'type': int,  # The type of the variable\r\n    'default': 0,\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"The following commands are all correct and mean the same thing. You can\r\nuse -- and - in front of keyword arguments. They mean the same thing.\r\nWe support this for more legacy reasons."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python3 example/basic_argparse.py 'my required msg' hello_kwarg=124\r\npython3 example/basic_argparse.py 'my required msg' --hello_kwarg=124\r\npython3 example/basic_argparse.py 'my required msg' -hello_kwarg=124\n"})}),"\n",(0,s.jsx)(n.p,{children:"In each case, the output is:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"my required msg\r\nno optional message given\r\n124\r\n{'hello_kwarg': 124, 'hello': 'my required msg', 'hello_optional': 'no optional message given'}\r\n{'hello': 'my required msg', 'hello_kwarg': 124}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"detecting-explicitly-set-parameters",children:"Detecting Explicitly Set Parameters"}),"\n",(0,s.jsx)(n.p,{children:"Sometimes, it's good to know what parameters the user set explicitly, without filling in default values for everything. self.kwargs stores the entire parameter scope with default values filled in, whereas self.real_kwargs stores the values passed in specifically by the users."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"python3 example/basic_argparse.py 'my required msg' hello_kwarg=124\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"my required msg\r\nno optional message given\r\n124\r\n{'hello_kwarg': 124, 'hello': 'my required msg', 'hello_optional': 'no optional message given'}\r\n{'hello': 'my required msg', 'hello_kwarg': 124}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Notice that self.real_kwargs (last line) does not have 'hello_optional', since it was not passed explicitly by the user."}),"\n",(0,s.jsx)(n.h3,{id:"help",children:"Help"}),"\n",(0,s.jsx)(n.p,{children:'You can print the help message by using the "h" or "help" keyword arguments.\r\nThese are provided automatically and should not be manually defined.'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python3 example/basic_argparse.py h\r\npython3 example/basic_argparse.py -h\r\npython3 example/basic_argparse.py --help\r\npython3 example/basic_argparse.py -help\r\npython3 example/basic_argparse.py help\n"})}),"\n",(0,s.jsx)(n.p,{children:"In each case, the output is:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"USAGE: basic_argparse.py  [hello] [hello_optional (opt)] ...\r\n\r\nName            Default                    Type    Description\r\n--------------  -------------------------  ------  -------------------------------------\r\nhello                                      str     A message to print\r\nhello_optional  no optional message given  str     An optional message to print\r\nhello_kwarg     0                          int     An integer keyword argument to print\r\nhelp            False                      bool    Print help menu\r\nh               False                      bool    Print help menu\n"})}),"\n",(0,s.jsx)(n.h2,{id:"menus",children:"Menus"}),"\n",(0,s.jsx)(n.p,{children:"Let's say we're building an application launcher. Each application has it's\r\nown parameter space. We have two applications:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"VPIC: A particle simulator code"}),"\n",(0,s.jsx)(n.li,{children:"BD-CATS: A particle clustering code"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"VPIC only has one operation: to generate the particle data."}),"\n",(0,s.jsx)(n.p,{children:"BD-CATS has two operations: cluster the particle data and then visualize\r\nthe clustering by rendering an image at a certain resolution."}),"\n",(0,s.jsxs)(n.p,{children:["Below is the code from ",(0,s.jsx)(n.a,{href:"https://github.com/grc-iit/jarvis-util/blob/master/example/menu_argparse.py",children:"example/menu_argparse.py"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from jarvis_util.util.argparse import ArgParse\r\n\r\n\r\nclass MyArgParse(ArgParse):\r\n    def define_options(self):\r\n        self.add_menu('vpic')\r\n        self.add_args([\r\n            {\r\n                'name': 'steps',\r\n                'msg': 'Number of execution steps',\r\n                'type': int,  # The type of this variable\r\n                'required': True,  # This argument is required\r\n                'pos': True,  # This is a positional argument\r\n            }\r\n        ])\r\n\r\n        self.add_menu('bd-cats run')\r\n        self.add_args([\r\n            {\r\n                'name': 'path',\r\n                'msg': 'Path to particle data',\r\n                'type': str,  # The type of this variable\r\n                'required': True,  # This argument is required\r\n                'pos': True,  # This is a positional argument\r\n            }\r\n        ])\r\n\r\n        self.add_menu('bd-cats draw')\r\n        self.add_args([\r\n            {\r\n                'name': 'resolution',\r\n                'msg': 'Dimensions of the image to create',\r\n                'type': str,  # The type of this variable\r\n                'required': True,  # This argument is required\r\n                'pos': True,  # This is a positional argument\r\n            }\r\n        ])\r\n\r\n    def vpic(self):\r\n        print(f'Starting VPIC with {self.kwargs[\"steps\"]} steps')\r\n\r\n    def bd_cats_run(self):\r\n        print(f'Starting BD-CATS with {self.kwargs[\"path\"]}')\r\n\r\n    def bd_cats_draw(self):\r\n        print(f'Drawing BD-CATS output at {self.kwargs[\"resolution\"]}')\r\n\r\n\r\nargs = MyArgParse()\r\nargs.process_args()\n"})}),"\n",(0,s.jsx)(n.p,{children:"process_args will execute the function corresponding to the menu name.\r\nIn this case, the menu names are:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"vpic"}),"\n",(0,s.jsx)(n.li,{children:"bdcats run"}),"\n",(0,s.jsx)(n.li,{children:"bdcats draw"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"vpic-menu",children:"VPIC Menu"}),"\n",(0,s.jsx)(n.p,{children:"The following code defines the VPIC menu"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"self.add_menu('vpic')\r\nself.add_args([\r\n    {\r\n        'name': 'steps',\r\n        'msg': 'Number of execution steps',\r\n        'type': int,  # The type of this variable\r\n        'required': True,  # This argument is required\r\n        'pos': True,  # This is a positional argument\r\n    }\r\n])\n"})}),"\n",(0,s.jsx)(n.p,{children:"To execute the VPIC menu:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"python3 example/menu_argparse.py vpic 24\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Starting VPIC with 24 steps\n"})}),"\n",(0,s.jsx)(n.h3,{id:"bd-cats-run-menu",children:"BD-CATS Run Menu"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"self.add_menu('bd-cats draw')\r\nself.add_args([\r\n    {\r\n        'name': 'resolution',\r\n        'msg': 'Dimensions of the image to create',\r\n        'type': str,  # The type of this variable\r\n        'required': True,  # This argument is required\r\n        'pos': True,  # This is a positional argument\r\n    }\r\n])\n"})}),"\n",(0,s.jsx)(n.p,{children:"process_args will search for the method name corresponding to 'bd-cats draw'.\r\nThe corresponding method name replaces all spaces with '_' and all '-' with\r\n'_'. In this case, it will search for bd_cats_run."}),"\n",(0,s.jsx)(n.p,{children:"To execute the BD-CATS run menu:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"python3 example/menu_argparse.py bd-cats run /tmp/output.bin\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Starting BD-CATS with /tmp/output.bin\n"})}),"\n",(0,s.jsx)(n.h3,{id:"bd-cats-draw-menu",children:"BD-CATS Draw Menu"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"self.add_menu('bd-cats draw')\r\nself.add_args([\r\n    {\r\n        'name': 'resolution',\r\n        'msg': 'Dimensions of the image to create',\r\n        'type': str,  # The type of this variable\r\n        'required': True,  # This argument is required\r\n        'pos': True,  # This is a positional argument\r\n    }\r\n])\n"})}),"\n",(0,s.jsx)(n.p,{children:"process_args will search for the method name corresponding to 'bd-cats draw'.\r\nThe corresponding method name replaces all spaces with '_' and all '-' with\r\n'_'. In this case, it will search for bd_cats_draw."}),"\n",(0,s.jsx)(n.p,{children:"To execute the BD-CATS draw menu:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"python3 example/menu_argparse.py bd-cats run /tmp/output.bin\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Drawing BD-CATS output at 4096x4096\n"})}),"\n",(0,s.jsx)(n.h2,{id:"argument-types",children:"Argument Types"}),"\n",(0,s.jsx)(n.p,{children:"We currently support five main types of arguments:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Strings"}),"\n",(0,s.jsx)(n.li,{children:"Integers"}),"\n",(0,s.jsx)(n.li,{children:"Floats"}),"\n",(0,s.jsx)(n.li,{children:"Booleans"}),"\n",(0,s.jsx)(n.li,{children:"Lists of the above types"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Of these, booleans and lists are somewhat special."}),"\n",(0,s.jsx)(n.h3,{id:"boolean-arguments",children:"Boolean Arguments"}),"\n",(0,s.jsx)(n.p,{children:"Booleans are special in the sense that they have a special command line\r\nsyntax when used as keyword arguments (as opposed to positional)."}),"\n",(0,s.jsx)(n.p,{children:"Let's say we are at a restaurant and are ordering pasta. You have\r\ntwo options: with cheese and without cheese."}),"\n",(0,s.jsxs)(n.p,{children:["Below is the code from ",(0,s.jsx)(n.a,{href:"https://github.com/grc-iit/jarvis-util/blob/master/example/boolean_spaghetti.py",children:"example/boolean_spaghetti.py"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from jarvis_util.util.argparse import ArgParse\r\n\r\nclass MyArgParse(ArgParse):\r\n    def define_options(self):\r\n        self.add_menu('spaghetti')\r\n        self.add_args([\r\n            {\r\n                'name': 'cheese',\r\n                'msg': 'Whether to use cheese',\r\n                'type': bool,  # The type of this variable\r\n                'default': True\r\n            }\r\n        ])\r\n\r\n    def spaghetti(self):\r\n        if self.kwargs['cheese']:\r\n            print('I will take the spaghetti with cheese')\r\n        else:\r\n            print('I want actual Italian, and will not take your cheese')\r\n\r\n\r\nargs = MyArgParse()\r\nargs.process_args()\n"})}),"\n",(0,s.jsx)(n.h4,{id:"true",children:(0,s.jsx)(n.code,{children:"True"})}),"\n",(0,s.jsx)(n.p,{children:"There are two ways to indicate truth"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python3 example/boolean_spaghetti.py spaghetti --cheese=true\r\npython3 example/boolean_spaghetti.py spaghetti +cheese\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"I will take the spaghetti with cheese\n"})}),"\n",(0,s.jsx)(n.h4,{id:"false",children:(0,s.jsx)(n.code,{children:"False"})}),"\n",(0,s.jsx)(n.p,{children:"There are two ways to indicate false"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python3 example/boolean_spaghetti.py spaghetti --cheese=false\r\npython3 example/boolean_spaghetti.py spaghetti -cheese\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"I want actual Italian, and will not take your cheese\n"})}),"\n",(0,s.jsx)(n.h3,{id:"list-arguments",children:"List Arguments"}),"\n",(0,s.jsx)(n.p,{children:"There are many cases where having a list of information is needed.\r\nOne case that comes up is deciding which nodes in a distributed system\r\nto execute software. For this case, we use a list of strings."}),"\n",(0,s.jsx)(n.p,{children:"Below we have an example of running the VPIC application on a set\r\nof machines in parallel."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from jarvis_util.util.argparse import ArgParse\r\n\r\n\r\nclass MyArgParse(ArgParse):\r\n    def define_options(self):\r\n        self.add_menu('vpic run',\r\n                      keep_remainder=False)\r\n        self.add_args([\r\n            {\r\n                'name': 'hosts',\r\n                'msg': 'A list of hosts and threads pr',\r\n                'type': list,\r\n                'args': [\r\n                    {\r\n                        'name': 'host',\r\n                        'msg': 'A string representing a host',\r\n                        'type': str,\r\n                    }\r\n                ]\r\n            }\r\n        ])\r\n\r\n    def vpic_run(self):\r\n        print(self.kwargs['hosts'])\r\n\r\n\r\nargs = MyArgParse()\r\nargs.process_args()\n"})}),"\n",(0,s.jsx)(n.p,{children:"To pass a list of strings, run the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'python3 example/hostfile_test.py vpic run --hosts="[127.0.0.1, 10.0.0.1]"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"['127.0.0.1', '10.0.0.1']\n"})}),"\n",(0,s.jsx)(n.h3,{id:"nested-list-arguments",children:"Nested List Arguments"}),"\n",(0,s.jsx)(n.p,{children:"Sometimes, you may want to have a list of lists. We use YAML format\r\nto parse such a thing."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from jarvis_util.util.argparse import ArgParse\r\n\r\n\r\nclass MyArgParse(ArgParse):\r\n    def define_options(self):\r\n        self.add_menu('vpic run',\r\n                      keep_remainder=False)\r\n        self.add_args([\r\n            {\r\n                'name': 'hosts',\r\n                'msg': 'A list of hosts and threads per-host',\r\n                'type': list,\r\n                'args': [\r\n                    {\r\n                        'name': 'host',\r\n                        'msg': 'Host name',\r\n                        'type': str,\r\n                    },\r\n                    {\r\n                        'name': 'count',\r\n                        'msg': 'The number of devices to search for',\r\n                        'type': int,\r\n                    }\r\n                ]\r\n            }\r\n        ])\r\n\r\n\r\nargs = MyArgParse()\r\nargs.process_args()\n"})}),"\n",(0,s.jsx)(n.p,{children:"To pass a list of strings and ints, run the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'python3 example/hostfile_threads_test.py vpic run --hosts="[[127.0.0.1, 4], [10.0.0.1, 4]]"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"[['127.0.0.1', 4], ['10.0.0.1', 4]]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"tracking-remaining-arguments",children:"Tracking Remaining Arguments"}),"\n",(0,s.jsx)(n.p,{children:"Sometimes, you don't want your argument parser to error if a parameter is\r\nunrecognized. You may want to implement a special syntax for parsing the\r\nremaining parameters."}),"\n",(0,s.jsx)(n.p,{children:'In this case, menus provide the "keep_remainder" option and "remainder_as_kv" options.'}),"\n",(0,s.jsx)(n.h3,{id:"list-remainder",children:"List Remainder"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from jarvis_util.util.argparse import ArgParse\r\n\r\n\r\nclass MyArgParse(ArgParse):\r\n    def define_options(self):\r\n        self.add_menu(keep_remainder=True)\r\n        self.add_args([\r\n            {\r\n                'name': 'hi',\r\n                'msg': 'hello',\r\n                'type': str,\r\n                'default': None\r\n            }\r\n        ])\r\n\r\n    def main_menu(self):\r\n        print(self.kwargs['hi'])\r\n        print(self.remainder)\r\n\r\n\r\nargs = MyArgParse()\r\nargs.process_args()\n"})}),"\n",(0,s.jsx)(n.p,{children:'This will create a keyword argument name "hi", which takes as input a string,\r\nand keeps the remaining arguments in a list named "self.remainder".'}),"\n",(0,s.jsx)(n.p,{children:"Run the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python3 example/remainder.py --hi=hi 1 2 3 4 5\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"hi\r\n['1', '2', '3', '4', '5']\n"})}),"\n",(0,s.jsx)(n.h3,{id:"key-value-remainder",children:"Key-Value Remainder"}),"\n",(0,s.jsx)(n.p,{children:"Sometimes the remainder should be stored as a dict instead of\r\na list."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from jarvis_util.util.argparse import ArgParse\r\n\r\n\r\nclass MyArgParse(ArgParse):\r\n    def define_options(self):\r\n        self.add_menu(keep_remainder=True,\r\n                      remainder_as_kv=True)\r\n        self.add_args([\r\n            {\r\n                'name': 'hi',\r\n                'msg': 'hello',\r\n                'type': str,\r\n                'default': None\r\n            }\r\n        ])\r\n\r\n    def main_menu(self):\r\n        print(self.kwargs['hi'])\r\n        print(self.remainder_kv)\r\n\r\n\r\nargs = MyArgParse()\r\nargs.process_args()\n"})}),"\n",(0,s.jsx)(n.p,{children:'This will create a keyword argument name "hi", which takes as input a string, and keeps the remaining arguments in a dict named "self.remainder_kv".'}),"\n",(0,s.jsx)(n.p,{children:"Run the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python3 example/remainder_kv.py --hi=hi VAR1=25 VAR2=26\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"hi\r\n{'VAR1': '25', 'VAR2': '26'}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"choice-arguments",children:"Choice Arguments"}),"\n",(0,s.jsx)(n.p,{children:"Sometimes you have parameters which have a well-defined set of values.\r\nIn this case, you can define 'choices'."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from jarvis_util.util.argparse import ArgParse\r\n\r\n\r\nclass MyArgParse(ArgParse):\r\n    def define_options(self):\r\n        self.add_menu()\r\n        self.add_args([\r\n            {\r\n                'name': 'hi',\r\n                'msg': 'hello',\r\n                'type': str,\r\n                'choices': ['a', 'b', 'c'],\r\n                'default': None\r\n            }\r\n        ])\r\n\r\n    def main_menu(self):\r\n        print(self.kwargs['hi'])\r\n\r\n\r\nargs = MyArgParse()\r\nargs.process_args()\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example of correct input:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python3 example/choices.py hi=a\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"a\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example of incorrect input:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python3 example/choices.py hi=d\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"In the menu , hi=d is not a valid choice\r\nUSAGE: choices.py   ...\r\n\r\nName    Default    Type    Description\r\n------  ---------  ------  ---------------\r\nhi                 str     hello\r\nhelp    False      bool    Print help menu\r\nh       False      bool    Print help menu\r\nIn the menu , hi was not of type <class 'str'>\r\nUSAGE: choices.py   ...\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>t});var s=r(7294);const a={},i=s.createContext(a);function t(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);